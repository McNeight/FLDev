/*
    FLDev - FLTK Integrated Development Environment
    Copyright (C) 2005-2016  Philipp Pracht, Georg Potthast, Neil McNeight

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "pref_form.h"
void load_lang_cb(const char *file); 
int text_size; 
int save_window_size; 
bool auto_brace_mode; 
int auto_hide; 
int delbak; 
int backup_file; 

Fl_Double_Window *pref_window=(Fl_Double_Window *)0;

Fl_Button *pref_ok_btn=(Fl_Button *)0;

static void cb_pref_ok_btn(Fl_Button*, void*) {
  text_size = text_size_choice->value() * 2 + 6;
auto_brace_mode = auto_brace_check->value();
save_window_size = save_wsoe_check->value();
auto_hide = hide_output_check->value();
hl_plain = plain_btn->color();
hl_linecomment = line_btn->color();
hl_blockcomment = block_btn->color();
hl_string = string_btn->color();
hl_directive = directive_btn->color();
hl_type = type_btn->color();
hl_keyword = keyword_btn->color();
hl_character = character_btn->color();
background_color = bg_btn->color();
sprintf(usrdocdir,"%s",usrdoc_input->value());
backup_file = bak_check->value();
delbak = delbak_check->value();
pref_window->hide();
}

Fl_Button *pref_cancel_btn=(Fl_Button *)0;

static void cb_pref_cancel_btn(Fl_Button*, void*) {
  pref_window->hide();
}

Fl_Tabs *pref_tabs=(Fl_Tabs *)0;

Fl_Group *ed_group=(Fl_Group *)0;

Fl_Choice *text_size_choice=(Fl_Choice *)0;

Fl_Check_Button *smart_indent_check=(Fl_Check_Button *)0;

Fl_Check_Button *save_wsoe_check=(Fl_Check_Button *)0;

Fl_Check_Button *hide_output_check=(Fl_Check_Button *)0;

Fl_Check_Button *rec_pr_check=(Fl_Check_Button *)0;

Fl_Box *pref_highlight_label=(Fl_Box *)0;

Fl_Button *plain_btn=(Fl_Button *)0;

static void cb_plain_btn(Fl_Button*, void*) {
  plain_btn->color(fl_show_colormap(plain_btn->color()));
}

Fl_Button *line_btn=(Fl_Button *)0;

static void cb_line_btn(Fl_Button*, void*) {
  line_btn->color(fl_show_colormap(line_btn->color()));
}

Fl_Button *block_btn=(Fl_Button *)0;

static void cb_block_btn(Fl_Button*, void*) {
  block_btn->color(fl_show_colormap(block_btn->color()));
}

Fl_Button *string_btn=(Fl_Button *)0;

static void cb_string_btn(Fl_Button*, void*) {
  string_btn->color(fl_show_colormap(string_btn->color()));
}

Fl_Button *directive_btn=(Fl_Button *)0;

static void cb_directive_btn(Fl_Button*, void*) {
  directive_btn->color(fl_show_colormap(directive_btn->color()));
}

Fl_Button *type_btn=(Fl_Button *)0;

static void cb_type_btn(Fl_Button*, void*) {
  type_btn->color(fl_show_colormap(type_btn->color()));
}

Fl_Button *keyword_btn=(Fl_Button *)0;

static void cb_keyword_btn(Fl_Button*, void*) {
  keyword_btn->color(fl_show_colormap(keyword_btn->color()));
}

Fl_Button *character_btn=(Fl_Button *)0;

static void cb_character_btn(Fl_Button*, void*) {
  character_btn->color(fl_show_colormap(character_btn->color()));
}

Fl_Button *bg_btn=(Fl_Button *)0;

static void cb_bg_btn(Fl_Button*, void*) {
  bg_btn->color(fl_show_colormap(bg_btn->color()));
}

Fl_Check_Button *auto_brace_check=(Fl_Check_Button *)0;

Fl_Check_Button *bak_check=(Fl_Check_Button *)0;

Fl_Check_Button *delbak_check=(Fl_Check_Button *)0;

Fl_Group *env_group=(Fl_Group *)0;

Fl_Input *usrdoc_input=(Fl_Input *)0;

Fl_Button *lang_btn=(Fl_Button *)0;

static void cb_lang_btn(Fl_Button*, void*) {
  Fl_Native_File_Chooser fnfc;
fnfc.title(strmsg[3].c_str());
fnfc.filter("FLDev Language Files\t*.lng");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
if (fnfc.show())
    return;

const char *newfile = fnfc.filename();
if(newfile==NULL) return;
load_lang_cb(newfile);
}

Fl_Output *cur_lang_output=(Fl_Output *)0;

Fl_Button *def_lang_btn=(Fl_Button *)0;

static void cb_def_lang_btn(Fl_Button*, void*) {
  load_lang_cb(NULL);
}

Fl_Double_Window* make_pref_form() {
  { pref_window = new Fl_Double_Window(525, 325, "Preferences");
    pref_window->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    { pref_ok_btn = new Fl_Button(345, 295, 85, 25, "OK");
      pref_ok_btn->callback((Fl_Callback*)cb_pref_ok_btn);
    } // Fl_Button* pref_ok_btn
    { pref_cancel_btn = new Fl_Button(435, 295, 80, 25, "Cancel");
      pref_cancel_btn->callback((Fl_Callback*)cb_pref_cancel_btn);
    } // Fl_Button* pref_cancel_btn
    { pref_tabs = new Fl_Tabs(5, 5, 515, 285);
      { ed_group = new Fl_Group(10, 40, 510, 250, "Editor");
        { Fl_Box* o = new Fl_Box(20, 85, 260, 190);
          o->box(FL_ENGRAVED_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { text_size_choice = new Fl_Choice(130, 45, 60, 25, "Text Size");
          text_size_choice->down_box(FL_BORDER_BOX);
          text_size_choice->add("6");text_size_choice->add("8");text_size_choice->add("10");text_size_choice->add("12");text_size_choice->add("14");text_size_choice->add("16");text_size_choice->add("18");text_size_choice->add("20");
          text_size_choice->value(3);
        } // Fl_Choice* text_size_choice
        { smart_indent_check = new Fl_Check_Button(30, 95, 180, 25, "Use Auto-Indent Option");
          smart_indent_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* smart_indent_check
        { save_wsoe_check = new Fl_Check_Button(30, 145, 195, 25, "Save Window Size On Exit");
          save_wsoe_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* save_wsoe_check
        { hide_output_check = new Fl_Check_Button(30, 170, 195, 25, "Auto-hide Output Window");
          hide_output_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* hide_output_check
        { rec_pr_check = new Fl_Check_Button(30, 195, 235, 25, "Open previous project on startup");
          rec_pr_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* rec_pr_check
        { pref_highlight_label = new Fl_Box(290, 40, 220, 235, "Highlight Colors");
          pref_highlight_label->box(FL_ENGRAVED_BOX);
          pref_highlight_label->labeltype(FL_ENGRAVED_LABEL);
          pref_highlight_label->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* pref_highlight_label
        { plain_btn = new Fl_Button(320, 70, 15, 15, "Plain Text");
          plain_btn->callback((Fl_Callback*)cb_plain_btn);
          plain_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* plain_btn
        { line_btn = new Fl_Button(320, 90, 15, 15, "Line Comments");
          line_btn->callback((Fl_Callback*)cb_line_btn);
          line_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* line_btn
        { block_btn = new Fl_Button(320, 110, 15, 15, "Block Comments");
          block_btn->callback((Fl_Callback*)cb_block_btn);
          block_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* block_btn
        { string_btn = new Fl_Button(320, 130, 15, 15, "Strings");
          string_btn->callback((Fl_Callback*)cb_string_btn);
          string_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* string_btn
        { directive_btn = new Fl_Button(320, 150, 15, 15, "Directives");
          directive_btn->callback((Fl_Callback*)cb_directive_btn);
          directive_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* directive_btn
        { type_btn = new Fl_Button(320, 170, 15, 15, "Types");
          type_btn->callback((Fl_Callback*)cb_type_btn);
          type_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* type_btn
        { keyword_btn = new Fl_Button(320, 190, 15, 15, "Keywords");
          keyword_btn->callback((Fl_Callback*)cb_keyword_btn);
          keyword_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* keyword_btn
        { character_btn = new Fl_Button(320, 210, 15, 15, "Characters");
          character_btn->callback((Fl_Callback*)cb_character_btn);
          character_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* character_btn
        { bg_btn = new Fl_Button(320, 250, 15, 15, "Background");
          bg_btn->callback((Fl_Callback*)cb_bg_btn);
          bg_btn->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Button* bg_btn
        { auto_brace_check = new Fl_Check_Button(30, 120, 180, 25, "Use Auto-Brace Option");
          auto_brace_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* auto_brace_check
        { bak_check = new Fl_Check_Button(30, 220, 235, 25, "Create backup when loading file");
          bak_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* bak_check
        { delbak_check = new Fl_Check_Button(30, 245, 235, 25, "Delete backup files on exit");
          delbak_check->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* delbak_check
        ed_group->end();
      } // Fl_Group* ed_group
      { env_group = new Fl_Group(15, 30, 505, 255, "Environment");
        env_group->hide();
        { usrdoc_input = new Fl_Input(155, 55, 345, 25, "Path to FLTK Docs");
        } // Fl_Input* usrdoc_input
        { lang_btn = new Fl_Button(155, 145, 180, 25, "Load Language File");
          lang_btn->callback((Fl_Callback*)cb_lang_btn);
        } // Fl_Button* lang_btn
        { cur_lang_output = new Fl_Output(155, 115, 180, 25, "Current Language");
        } // Fl_Output* cur_lang_output
        { def_lang_btn = new Fl_Button(355, 115, 145, 25, "Restore Default");
          def_lang_btn->callback((Fl_Callback*)cb_def_lang_btn);
        } // Fl_Button* def_lang_btn
        env_group->end();
      } // Fl_Group* env_group
      pref_tabs->end();
    } // Fl_Tabs* pref_tabs
    pref_window->set_modal();
    pref_window->size_range(525, 325);
    pref_window->end();
  } // Fl_Double_Window* pref_window
  return pref_window;
}

# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cpp}
decl {\#include <FL/Fl_Native_File_Chooser.H>} {public local
} 

decl {\#include <FL/fl_show_colormap.H>} {public local
} 

decl {\#include "globals.h"} {public local
} 

decl {void load_lang_cb(const char *file);} {public local
} 

decl {int text_size;} {public local
} 

decl {extern Fl_Color hl_plain;} {public local
} 

decl {extern Fl_Color hl_linecomment;} {public local
} 

decl {extern Fl_Color hl_blockcomment;} {public local
} 

decl {extern Fl_Color hl_string;} {public local
} 

decl {extern Fl_Color hl_directive;} {public local
} 

decl {extern Fl_Color hl_type;} {public local
} 

decl {extern Fl_Color hl_keyword;} {public local
} 

decl {extern Fl_Color hl_character;} {public local
} 

decl {extern Fl_Color background_color;} {public local
} 

decl {extern char usrdocdir[256];} {public local
} 

decl {int save_window_size;} {public local
} 

decl {bool auto_brace_mode;} {public local
} 

decl {int auto_hide;} {public local
} 

decl {int delbak;} {public local
} 

decl {int backup_file;} {public local
} 

Function {make_pref_form()} {open
} {
  Fl_Window pref_window {
    label Preferences open selected
    xywh {2048 180 525 325} type Double align 5 modal visible
  } {
    Fl_Button pref_ok_btn {
      label OK
      callback {text_size = text_size_choice->value() * 2 + 6;
auto_brace_mode = auto_brace_check->value();
save_window_size = save_wsoe_check->value();
auto_hide = hide_output_check->value();
hl_plain = plain_btn->color();
hl_linecomment = line_btn->color();
hl_blockcomment = block_btn->color();
hl_string = string_btn->color();
hl_directive = directive_btn->color();
hl_type = type_btn->color();
hl_keyword = keyword_btn->color();
hl_character = character_btn->color();
background_color = bg_btn->color();
sprintf(usrdocdir,"%s",usrdoc_input->value());
backup_file = bak_check->value();
delbak = delbak_check->value();
pref_window->hide();}
      xywh {345 295 85 25}
    }
    Fl_Button pref_cancel_btn {
      label Cancel
      callback {pref_window->hide();}
      xywh {435 295 80 25}
    }
    Fl_Tabs pref_tabs {open
      xywh {5 5 515 285}
    } {
      Fl_Group ed_group {
        label Editor open
        xywh {10 40 510 250}
      } {
        Fl_Box {} {
          xywh {20 85 260 190} box ENGRAVED_BOX labeltype ENGRAVED_LABEL align 21
        }
        Fl_Choice text_size_choice {
          label {Text Size} open
          xywh {130 45 60 25} down_box BORDER_BOX
          code0 {text_size_choice->add("6");text_size_choice->add("8");text_size_choice->add("10");text_size_choice->add("12");text_size_choice->add("14");text_size_choice->add("16");text_size_choice->add("18");text_size_choice->add("20");}
          code1 {text_size_choice->value(3);}
        } {}
        Fl_Check_Button smart_indent_check {
          label {Use Auto-Indent Option}
          xywh {30 95 180 25} down_box DOWN_BOX
        }
        Fl_Check_Button save_wsoe_check {
          label {Save Window Size On Exit}
          xywh {30 145 195 25} down_box DOWN_BOX
        }
        Fl_Check_Button hide_output_check {
          label {Auto-hide Output Window}
          xywh {30 170 195 25} down_box DOWN_BOX
        }
        Fl_Check_Button rec_pr_check {
          label {Open previous project on startup}
          xywh {30 195 235 25} down_box DOWN_BOX
        }
        Fl_Box pref_highlight_label {
          label {Highlight Colors}
          xywh {290 40 220 235} box ENGRAVED_BOX labeltype ENGRAVED_LABEL align 21
        }
        Fl_Button plain_btn {
          label {Plain Text}
          callback {plain_btn->color(fl_show_colormap(plain_btn->color()));}
          xywh {320 70 15 15} align 8
        }
        Fl_Button line_btn {
          label {Line Comments}
          callback {line_btn->color(fl_show_colormap(line_btn->color()));}
          xywh {320 90 15 15} align 8
        }
        Fl_Button block_btn {
          label {Block Comments}
          callback {block_btn->color(fl_show_colormap(block_btn->color()));}
          xywh {320 110 15 15} align 8
        }
        Fl_Button string_btn {
          label Strings
          callback {string_btn->color(fl_show_colormap(string_btn->color()));}
          xywh {320 130 15 15} align 8
        }
        Fl_Button directive_btn {
          label Directives
          callback {directive_btn->color(fl_show_colormap(directive_btn->color()));}
          xywh {320 150 15 15} align 8
        }
        Fl_Button type_btn {
          label Types
          callback {type_btn->color(fl_show_colormap(type_btn->color()));}
          xywh {320 170 15 15} align 8
        }
        Fl_Button keyword_btn {
          label Keywords
          callback {keyword_btn->color(fl_show_colormap(keyword_btn->color()));}
          xywh {320 190 15 15} align 8
        }
        Fl_Button character_btn {
          label Characters
          callback {character_btn->color(fl_show_colormap(character_btn->color()));}
          xywh {320 210 15 15} align 8
        }
        Fl_Button bg_btn {
          label Background
          callback {bg_btn->color(fl_show_colormap(bg_btn->color()));}
          xywh {320 250 15 15} align 8
        }
        Fl_Check_Button auto_brace_check {
          label {Use Auto-Brace Option}
          xywh {30 120 180 25} down_box DOWN_BOX
        }
        Fl_Check_Button bak_check {
          label {Create backup when loading file}
          xywh {30 220 235 25} down_box DOWN_BOX
        }
        Fl_Check_Button delbak_check {
          label {Delete backup files on exit}
          xywh {30 245 235 25} down_box DOWN_BOX
        }
      }
      Fl_Group env_group {
        label Environment open
        xywh {15 30 505 255} hide
      } {
        Fl_Input usrdoc_input {
          label {Path to FLTK Docs}
          xywh {155 55 345 25}
        }
        Fl_Button lang_btn {
          label {Load Language File}
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title(strmsg[3].c_str());
fnfc.filter("FLDev Language Files\\t*.lng");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
if (fnfc.show())
    return;

const char *newfile = fnfc.filename();
if(newfile==NULL) return;
load_lang_cb(newfile);}
          xywh {155 145 180 25}
        }
        Fl_Output cur_lang_output {
          label {Current Language}
          xywh {155 115 180 25}
        }
        Fl_Button def_lang_btn {
          label {Restore Default}
          callback {load_lang_cb(NULL);}
          xywh {355 115 145 25}
        }
      }
    }
  }
} 

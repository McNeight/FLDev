# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
use_FL_COMMAND 
header_name {.h} 
code_name {.cxx}
comment {/*
    FLDev - FLTK Integrated Development Environment
    Copyright (C) 2005-2016  Philipp Pracht, Georg Potthast, Neil McNeight

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
} {selected in_source in_header
} 

decl {\#include "Fl_Dev_I18N.h";} {public local
} 

decl {\#include "Fl_Dev_Util.h";} {public local
} 

decl {\#include "globals.h"} {public local
} 

decl {int pr_changed;} {public local
} 

Function {make_proj_window()} {open
} {
  Fl_Window project_options_window {
    label {Project Options} open
    xywh {2048 188 410 370} type Double modal size_range {410 370 0 0} visible
  } {
    Fl_Tabs pr_op_tabs {open
      xywh {5 5 400 291}
    } {
      Fl_Group pr_op_pr_grp {
        label Project open
        xywh {5 35 400 261} hide
      } {
        Fl_Input pname {
          label {Project Name}
          callback {pr_changed = true;}
          xywh {15 60 380 25} align 5 when 1
        }
        Fl_Input ppr_dir {
          label {Project Directory}
          callback {pr_changed = true;}
          xywh {15 105 380 25} align 5
        }
        Fl_Input ptarg {
          label {Target File Name}
          callback {pr_changed = true;}
          xywh {15 150 380 25} align 5 when 1
        }
        Fl_Input pobdir {
          label {Object Directory}
          callback {pr_changed = true;}
          xywh {15 195 380 25} align 5 when 1
        }
        Fl_Input pbin {
          label {Bin Directory}
          callback {pr_changed = true;}
          xywh {15 240 380 25} align 5 when 1
        }
        Fl_Check_Button console_check {
          label {Execute in Console}
          callback {if(pr_changed == 0) pr_changed = 2;}
          xywh {125 261 150 35} down_box DOWN_BOX when 1
        }
      }
      Fl_Group pr_op_cl_grp {
        label {Compiler and Linker} open
        xywh {5 35 400 260}
      } {
        Fl_Input plib {
          label Libraries
          callback {pr_changed = true;}
          xywh {15 60 380 25} align 5 when 1
        }
        Fl_Input plibdir {
          label {Library Dirs}
          callback {pr_changed = true;}
          xywh {15 105 380 25} align 5 when 1
        }
        Fl_Input pincl {
          label {Include Dirs}
          callback {pr_changed = true;}
          xywh {15 150 380 25} align 5 when 1
        }
        Fl_Input pcflags {
          label {Compiler Flags}
          callback {pr_changed = true;}
          xywh {15 195 380 25} align 5 when 1
        }
        Fl_Input pldflags {
          label {Linker Flags}
          callback {pr_changed = true;}
          xywh {15 240 380 25} align 5 when 1
        }
      }
      Fl_Group pr_op_fi_grp {
        label Files open
        xywh {5 35 400 260} hide
      } {
        Fl_Input psrc {
          label Sources
          callback {pr_changed = true;}
          xywh {15 60 340 25} align 5 when 1
        }
        Fl_Input phdr {
          label Headers
          callback {pr_changed = true;}
          xywh {15 105 340 25} align 5 when 1
        }
        Fl_Input pgui {
          label {Fluid GUI Files}
          callback {pr_changed = true;}
          xywh {15 150 340 25} align 5 when 1
        }
        Fl_Button {} {
          label add
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title(strmsg[3].c_str());
fnfc.filter("C & C++ Source Files\\t*.{cpp,cxx,c,cc,CPP,CXX,C,CC}");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
if (fnfc.show())
    return;

const char *newfile = fnfc.filename();

if(newfile=="") return;
if (newfile != NULL) 
{
	char rel[255];
	fl_filename_relative(rel,newfile);
	psrc->value(trim(string(psrc->value())+ " " + rel).c_str());
	pr_changed = true;
}}
          xywh {360 60 35 25}
        }
        Fl_Button {} {
          label add
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title(strmsg[3].c_str());
fnfc.filter("C & C++ Header Files\\t*.{h|hpp|H|HPP}");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
if (fnfc.show())
    return;

const char *newfile = fnfc.filename();

if(newfile=="") return;
if (newfile != NULL) 
{
	char rel[255];
	fl_filename_relative(rel,newfile);
	phdr->value(trim(string(phdr->value())+ " " + rel).c_str());
	pr_changed = true;
}}
          xywh {360 105 35 25}
        }
        Fl_Button {} {
          label add
          callback {Fl_Native_File_Chooser fnfc;
fnfc.title(strmsg[3].c_str());
fnfc.filter("FLUID Files\\t*.{fl,fd}");
fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
if (fnfc.show())
    return;

const char *newfile = fnfc.filename();

if(newfile=="") return;
if (newfile != NULL) 
{
	char rel[255];
	fl_filename_relative(rel,newfile);
	pgui->value(trim(string(pgui->value())+ " " + rel).c_str());
	pr_changed = true;
}}
          xywh {360 150 35 25}
        }
      }
    }
    Fl_Button {} {
      label OK
      callback {project_options_window->hide();}
      xywh {70 319 75 25}
    }
    Fl_Button {} {
      label Cancel
      callback {pr_changed = 0;
project_options_window->hide();}
      xywh {255 319 75 25}
    }
  }
} 
